from aiogram import Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.brief_data import BRIEF_QUESTIONS

router = Router()

class BriefForm(StatesGroup):
    waiting_for_answer = State()

@router.callback_query(lambda c: c.data.startswith("fill_brief_"))
async def start_brief(callback: CallbackQuery, state: FSMContext):
    lang = (await state.get_data()).get("lang", "ru")
    service_id = callback.data.split("fill_brief_")[-1]

    await state.update_data(
        current_question=0,
        answers=[],
        current_service_id=service_id
    )

    questions = BRIEF_QUESTIONS[lang][service_id]

    await callback.message.answer("‚úîÔ∏è")
    await callback.message.answer({
        "ru": "üëâ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 6 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏",
        "en": "üëâ Please answer 6 short questions for this service",
        "kz": "üëâ –ë“±–ª “õ—ã–∑–º–µ—Ç –±–æ–π—ã–Ω—à–∞ 6 “õ—ã—Å“õ–∞ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑"
    }[lang])
    await callback.message.answer(questions[0])
    await state.set_state(BriefForm.waiting_for_answer)

@router.message(BriefForm.waiting_for_answer)
async def process_brief_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    service_id = data.get("current_service_id")

    if not service_id:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞.")
        await state.clear()
        return

    answers = data.get("answers", [])
    current_index = data.get("current_question", 0)

    answers.append(message.text)
    current_index += 1

    await state.update_data(answers=answers, current_question=current_index)

    questions = BRIEF_QUESTIONS[lang][service_id]

    if current_index < len(questions):
        await message.answer(questions[current_index])
    else:
        thank_you_text = {
            "ru": "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!Ô∏è\n–°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>!‚ú®",
            "en": "Thank you! You're amazing.Ô∏è\nWe will contact you soon to <b>confirm your order</b>‚ú®",
            "kz": "–†–∞“õ–º–µ—Ç! –°—ñ–∑ –∫–µ—Ä–µ–º–µ—Ç—Å—ñ–∑.\n–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω –∂–∞“õ—ã–Ω <b>–∞—Ä–∞–¥–∞ —Å—ñ–∑–±–µ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å–∞–º—ã–∑</b>‚ú®"
        }.get(lang, "Thank you!")

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text={
                    "ru": "üìå –ú–µ–Ω—é",
                    "en": "üìå Menu",
                    "kz": "üìå –ú”ô–∑—ñ—Ä"
                }[lang])]
            ],
            resize_keyboard=True,
            input_field_placeholder={
                "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                "en": "Choose an action",
                "kz": "”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑"
            }[lang]
        )

        await message.answer("‚úçüèºÔ∏è")
        await message.answer(thank_you_text, reply_markup=keyboard)
        await state.clear()
