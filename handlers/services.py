from aiogram import Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.service_details import SERVICE_DETAILS as service_details
from handlers.service_data import services, HEADINGS
from handlers.brief_data import BRIEF_QUESTIONS
import translations

router = Router()

class BriefForm(StatesGroup):
    waiting_for_answer = State()

def escape_md(text: str) -> str:
    special_chars = r'\_[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text

# üîπ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
@router.callback_query(lambda c: c.data == "services")
async def show_services(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")

    menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=translations.TEXT[lang]["menu_button"])]],
        resize_keyboard=True,
        is_persistent=True
    )

    await callback.message.answer(HEADINGS[lang], reply_markup=menu_keyboard)

    for key, service in services[lang].items():
        text = (
            f"{escape_md(service['title'])}\n"
            f"{escape_md(service['description'])}\n"
            f"{escape_md(service['duration'])}\n"
            f"üí∞ ||{escape_md(service['price'])}||"
        )
        buttons = [
            [
                InlineKeyboardButton(
                    text={"ru": "üìÑ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "en": "üìÑ More info", "kz": "üìÑ –¢–æ–ª—ã“ì—ã—Ä–∞“õ"}[lang],
                    callback_data=f"details_{key}"
                ),
                InlineKeyboardButton(
                    text={"ru": "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "en": "üì© Send request", "kz": "üì© ”®—Ç—ñ–Ω—ñ–º –∂—ñ–±–µ—Ä—É"}[lang],
                    callback_data=f"request_{key}"
                )
            ]
        ]
        await callback.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="MarkdownV2"
        )

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–∏—Ñ–∞
@router.callback_query(lambda c: c.data.startswith("request_"))
async def handle_request(callback: CallbackQuery, state: FSMContext):
    service_id = callback.data.split("request_")[-1]
    await state.update_data(request_service_id=service_id)
    data = await state.get_data()
    lang = data.get("lang", "ru")

    service_name = services[lang].get(service_id, {}).get("title", "[unknown service]")
    user = callback.from_user
    contact_info = f"@{user.username}" if user.username else f"{user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (id: {user.id})"

    await state.update_data(
        current_question=0,
        answers=[],
        current_service_id=service_id,
        user_contact=contact_info
    )

    questions = BRIEF_QUESTIONS[lang][service_id]

    confirm_text = {
        "ru": "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É:",
        "en": "You selected the service:",
        "kz": "–°—ñ–∑ —Ç–∞“£–¥–∞“ì–∞–Ω “õ—ã–∑–º–µ—Ç:"
    }[lang]

    await callback.message.answer("‚úîÔ∏è")

    await callback.message.answer(
        f"{confirm_text}\n\n*{escape_md(service_name)}*\n" +
        {
            "ru": "üëâ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ *6 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤* –¥–ª—è –±—Ä–∏—Ñ–∞",
            "en": "üëâ Please answer *6 short questions* for the brief",
            "kz": "üëâ –ë—Ä–∏—Ñ “Ø—à—ñ–Ω *6 “õ—ã—Å“õ–∞ —Å“±—Ä–∞“õ“õ–∞* –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑"
        }[lang],
        parse_mode="MarkdownV2"
    )

    await callback.message.answer(questions[0])
    await state.set_state(BriefForm.waiting_for_answer)

# üîπ –ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞ –±–µ–∑ –±—Ä–∏—Ñ–∞
@router.callback_query(lambda c: c.data == "quick_request")
async def handle_quick_request(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_id = data.get("request_service_id")
    lang = data.get("lang", "ru")

    service_name = services[lang].get(service_id, {}).get("title", "[unknown service]")

    await callback.message.answer("‚úîÔ∏è")

    confirm_text = {
        "ru": "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏‚ú®.",
        "en": "We'll contact you shortly to clarify the details‚ú®.",
        "kz": "–ë—ñ–∑ —Å—ñ–∑–±–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—ã–ø, –µ–≥–∂–µ–π-—Ç–µ–≥–∂–µ–π—ñ–Ω –Ω–∞“õ—Ç—ã–ª–∞–π–º—ã–∑‚ú®."
    }[lang]

    full_message = escape_md(confirm_text) + f"\n{escape_md({'ru': '–í—ã –≤—ã–±—Ä–∞–ª–∏', 'en': 'You selected', 'kz': '–°—ñ–∑ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑'}[lang])}: *{escape_md(service_name)}*"

    await callback.message.answer(full_message, parse_mode="MarkdownV2")

# üîπ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª—É–≥–µ
@router.callback_query(lambda c: c.data.startswith("details_"))
async def handle_details(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    service_id = callback.data.split("details_")[-1]

    text = service_details[lang].get(service_id, {
        "ru": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        "en": "Information temporarily unavailable.",
        "kz": "–ê“õ–ø–∞—Ä–∞—Ç —É–∞“õ—ã—Ç—à–∞ “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑."
    }[lang])

    request_text = {
        "ru": "üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        "en": "üì© Send request",
        "kz": "üì© ”®—Ç—ñ–Ω—ñ–º –∂—ñ–±–µ—Ä—É"
    }[lang]

    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=request_text, callback_data=f"request_{service_id}")]
        ]
    )

    await callback.message.answer(text, reply_markup=buttons)
